#include <stdio.h>
#define MOD 1000000007

long long modPow(long long a, long long x, long long p) {
  //calculates a^x mod p in logarithmic time.
  long long res = 1;
  while(x > 0) {
    if( x % 2 != 0) {
      res = (res * a) % p;
    }
    a = (a * a) % p;
    x /= 2;
  }
  return res;
}

long long modInverse(long long a, long long p) {
  //calculates the modular multiplicative of a mod m.
  //(assuming p is prime).
  return modPow(a, p-2, p);
}

long long combinations(long long n,long long r){
  long long res=1,den;
  if(n<r)
    res=0;
  else{
    for(int i=0;i<6;i++){
      res=res*(res-i);
      if(res>MOD)
	res=res%MOD;
    }
    //long long multInverse=modInverse(720,MOD);
    //res=(res*multInverse)%MOD;
    res=res/720;
  }
  //res=(long long)(((((((n*(n-1))%MOD)*(n-2))%MOD*(n-3))%MOD*(n-4))%MOD*(n-5))%MOD/720);
  return res;
}

int main(){
  long long n,res;
  scanf("%lld",&n);
  if(n%2==0)
    res=combinations(n/2-1,6);
  else
    res=combinations(n/2,6);
  printf("%lld\n",res);
  return 0;
}
